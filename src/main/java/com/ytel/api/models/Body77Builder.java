/*
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.models;

import java.util.*;

public class Body77Builder {
    //the instance to build
    private Body77 body77;

    /**
     * Default constructor to initialize the instance
     */
    public Body77Builder() {
        body77 = new Body77();
    }

    /**
     * A valid Ytel Voice enabled number (E.164 format) that will be initiating the phone call.
     */
    public Body77Builder from(String from) {
        body77.setFrom(from);
        return this;
    }

    /**
     * Please enter multiple E164 number. You can add max 10 numbers. Add numbers separated with comma. e.g : +12223334444,+15556667777
     */
    public Body77Builder to(String to) {
        body77.setTo(to);
        return this;
    }

    /**
     * URL requested once the call connects
     */
    public Body77Builder url(String url) {
        body77.setUrl(url);
        return this;
    }

    /**
     * Define the DTMF that the called party should send to bridge the call. Allowed Values : 0-9, #, *
     */
    public Body77Builder groupConfirmKey(String groupConfirmKey) {
        body77.setGroupConfirmKey(groupConfirmKey);
        return this;
    }

    /**
     * Specify the audio file you want to play when the called party picks up the call
     */
    public Body77Builder groupConfirmFile(GroupConfirmFileEnum groupConfirmFile) {
        body77.setGroupConfirmFile(groupConfirmFile);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required URL once call connects.
     */
    public Body77Builder method(String method) {
        body77.setMethod(method);
        return this;
    }

    /**
     * URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the call is finished.
     */
    public Body77Builder statusCallBackUrl(String statusCallBackUrl) {
        body77.setStatusCallBackUrl(statusCallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     */
    public Body77Builder statusCallBackMethod(String statusCallBackMethod) {
        body77.setStatusCallBackMethod(statusCallBackMethod);
        return this;
    }

    /**
     * URL requested if the initial Url parameter fails or encounters an error
     */
    public Body77Builder fallBackUrl(String fallBackUrl) {
        body77.setFallBackUrl(fallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required FallbackUrl once call connects.
     */
    public Body77Builder fallBackMethod(String fallBackMethod) {
        body77.setFallBackMethod(fallBackMethod);
        return this;
    }

    /**
     * URL that can be requested every 60 seconds during the call to notify of elapsed time and pass other general information.
     */
    public Body77Builder heartBeatUrl(String heartBeatUrl) {
        body77.setHeartBeatUrl(heartBeatUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request HeartbeatUrl.
     */
    public Body77Builder heartBeatMethod(String heartBeatMethod) {
        body77.setHeartBeatMethod(heartBeatMethod);
        return this;
    }

    /**
     * Time (in seconds) we should wait while the call is ringing before canceling the call
     */
    public Body77Builder timeout(Integer timeout) {
        body77.setTimeout(timeout);
        return this;
    }

    /**
     * DTMF Digits to play to the call once it connects. 0-9, #, or *
     */
    public Body77Builder playDtmf(String playDtmf) {
        body77.setPlayDtmf(playDtmf);
        return this;
    }

    /**
     * Specifies if the caller id will be hidden
     */
    public Body77Builder hideCallerId(String hideCallerId) {
        body77.setHideCallerId(hideCallerId);
        return this;
    }

    /**
     * Specifies if the call should be recorded
     */
    public Body77Builder record(Boolean record) {
        body77.setRecord(record);
        return this;
    }

    /**
     * Recording parameters will be sent here upon completion
     */
    public Body77Builder recordCallBackUrl(String recordCallBackUrl) {
        body77.setRecordCallBackUrl(recordCallBackUrl);
        return this;
    }

    /**
     * Method used to request the RecordCallback URL.
     */
    public Body77Builder recordCallBackMethod(String recordCallBackMethod) {
        body77.setRecordCallBackMethod(recordCallBackMethod);
        return this;
    }

    /**
     * Specifies if the call recording should be transcribed
     */
    public Body77Builder transcribe(Boolean transcribe) {
        body77.setTranscribe(transcribe);
        return this;
    }

    /**
     * Transcription parameters will be sent here upon completion
     */
    public Body77Builder transcribeCallBackUrl(String transcribeCallBackUrl) {
        body77.setTranscribeCallBackUrl(transcribeCallBackUrl);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Body77 build() {
        return body77;
    }
}