/*
 * YtelAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.ytel.api.models;

import java.util.*;

public class Body55Builder {
    //the instance to build
    private Body55 body55;

    /**
     * Default constructor to initialize the instance
     */
    public Body55Builder() {
        body55 = new Body55();
    }

    /**
     * A valid 10-digit number (E.164 format) that will be initiating the conference call.
     */
    public Body55Builder from(String from) {
        body55.setFrom(from);
        return this;
    }

    /**
     * A valid 10-digit number (E.164 format) that is to receive the conference call.
     */
    public Body55Builder to(String to) {
        body55.setTo(to);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required URL once call connects.
     */
    public Body55Builder method(String method) {
        body55.setMethod(method);
        return this;
    }

    /**
     * URL that can be requested to receive notification when call has ended. A set of default parameters will be sent here once the conference is finished.
     */
    public Body55Builder statusCallBackUrl(String statusCallBackUrl) {
        body55.setStatusCallBackUrl(statusCallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
     */
    public Body55Builder statusCallBackMethod(String statusCallBackMethod) {
        body55.setStatusCallBackMethod(statusCallBackMethod);
        return this;
    }

    /**
     * URL requested if the initial Url parameter fails or encounters an error
     */
    public Body55Builder fallbackUrl(String fallbackUrl) {
        body55.setFallbackUrl(fallbackUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required FallbackUrl once call connects.
     */
    public Body55Builder fallbackMethod(String fallbackMethod) {
        body55.setFallbackMethod(fallbackMethod);
        return this;
    }

    /**
     * Specifies if the conference should be recorded.
     */
    public Body55Builder record(Boolean record) {
        body55.setRecord(record);
        return this;
    }

    /**
     * Recording parameters will be sent here upon completion.
     */
    public Body55Builder recordCallBackUrl(String recordCallBackUrl) {
        body55.setRecordCallBackUrl(recordCallBackUrl);
        return this;
    }

    /**
     * Specifies the HTTP method used to request the required URL once conference connects.
     */
    public Body55Builder recordCallBackMethod(String recordCallBackMethod) {
        body55.setRecordCallBackMethod(recordCallBackMethod);
        return this;
    }

    /**
     * Schedule conference in future. Schedule time must be greater than current time
     */
    public Body55Builder scheduleTime(String scheduleTime) {
        body55.setScheduleTime(scheduleTime);
        return this;
    }

    /**
     * The number of seconds the call stays on the line while waiting for an answer. The max time limit is 999 and the default limit is 60 seconds but lower times can be set.
     */
    public Body55Builder timeout(Integer timeout) {
        body55.setTimeout(timeout);
        return this;
    }
    /**
     * Build the instance with the given values
     */
    public Body55 build() {
        return body55;
    }
}